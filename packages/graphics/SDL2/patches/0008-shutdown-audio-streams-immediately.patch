diff --git a/src/audio/SDL_audio.c b/src/audio/SDL_audio.c
index 96586fe..2996b37 100644
--- a/src/audio/SDL_audio.c
+++ b/src/audio/SDL_audio.c
@@ -791,7 +791,7 @@ static int SDLCALL SDL_RunAudio(void *userdata)
     }
 
     /* Wait for the audio to drain. */
-    SDL_Delay(((device->spec.samples * 1000) / device->spec.freq) * 2);
+//    SDL_Delay(((device->spec.samples * 1000) / device->spec.freq) * 2);
 
     current_audio.impl.ThreadDeinit(device);
 
diff --git a/src/audio/alsa/SDL_alsa_audio.c b/src/audio/alsa/SDL_alsa_audio.c
index 3ed66f2..b57fe66 100644
--- a/src/audio/alsa/SDL_alsa_audio.c
+++ b/src/audio/alsa/SDL_alsa_audio.c
@@ -454,12 +454,12 @@ static void ALSA_FlushCapture(_THIS)
 static void ALSA_CloseDevice(_THIS)
 {
     if (this->hidden->pcm_handle) {
-        /* Wait for the submitted audio to drain
-           ALSA_snd_pcm_drop() can hang, so don't use that.
-         */
-        Uint32 delay = ((this->spec.samples * 1000) / this->spec.freq) * 2;
-        SDL_Delay(delay);
-
+//        /* Wait for the submitted audio to drain
+//           ALSA_snd_pcm_drop() can hang, so don't use that.
+//         */
+//        Uint32 delay = ((this->spec.samples * 1000) / this->spec.freq) * 2;
+//        SDL_Delay(delay);
+//
         ALSA_snd_pcm_close(this->hidden->pcm_handle);
     }
     SDL_free(this->hidden->mixbuf);
