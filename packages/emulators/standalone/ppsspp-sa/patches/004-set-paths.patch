diff -rupN ppsspp.orig/Core/Config.cpp ppsspp/Core/Config.cpp
--- ppsspp.orig/Core/Config.cpp	2024-04-24 20:38:11.626645801 +0000
+++ ppsspp/Core/Config.cpp	2024-04-24 20:39:14.719993428 +0000
@@ -1075,10 +1075,10 @@ void Config::Reload() {
 void Config::UpdateIniLocation(const char *iniFileName, const char *controllerIniFilename) {
 	const bool useIniFilename = iniFileName != nullptr && strlen(iniFileName) > 0;
 	const char *ppssppIniFilename = IsVREnabled() ? "ppssppvr.ini" : "ppsspp.ini";
-	iniFilename_ = FindConfigFile(useIniFilename ? iniFileName : ppssppIniFilename);
+	iniFilename_ = Path("/storage/.config/ppsspp/PSP/SYSTEM") / ppssppIniFilename;
 	const bool useControllerIniFilename = controllerIniFilename != nullptr && strlen(controllerIniFilename) > 0;
 	const char *controlsIniFilename = IsVREnabled() ? "controlsvr.ini" : "controls.ini";
-	controllerIniFilename_ = FindConfigFile(useControllerIniFilename ? controllerIniFilename : controlsIniFilename);
+	controllerIniFilename_ = Path("/storage/.config/ppsspp/PSP/SYSTEM") / controlsIniFilename;
 }
 
 bool Config::LoadAppendedConfig() {
diff -rupN ppsspp.orig/Core/SaveState.cpp ppsspp/Core/SaveState.cpp
--- ppsspp.orig/Core/SaveState.cpp	2024-04-24 20:38:11.630645887 +0000
+++ ppsspp/Core/SaveState.cpp	2024-04-24 21:19:52.911740439 +0000
@@ -532,7 +532,7 @@ namespace SaveState
 
 	Path GenerateSaveSlotFilename(const Path &gameFilename, int slot, const char *extension)
 	{
-		std::string filename = StringFromFormat("%s_%d.%s", GenerateFullDiscId(gameFilename).c_str(), slot, extension);
+		std::string filename = StringFromFormat("%s_%d.%s", gameFilename.WithReplacedExtension("").GetFilename().c_str(), slot, extension);
 		return GetSysDirectory(DIRECTORY_SAVESTATE) / filename;
 	}
 
diff -rupN ppsspp.orig/Core/System.cpp ppsspp/Core/System.cpp
--- ppsspp.orig/Core/System.cpp	2024-04-24 20:38:11.630645887 +0000
+++ ppsspp/Core/System.cpp	2024-04-24 21:23:17.568309911 +0000
@@ -659,14 +659,8 @@ std::string PSP_GetLoading() {
 }
 
 Path GetSysDirectory(PSPDirectories directoryType) {
-	const Path &memStickDirectory = g_Config.memStickDirectory;
-	Path pspDirectory;
-	if (!strcasecmp(memStickDirectory.GetFilename().c_str(), "PSP")) {
-		// Let's strip this off, to easily allow choosing a root directory named "PSP" on Android.
-		pspDirectory = memStickDirectory;
-	} else {
-		pspDirectory = memStickDirectory / "PSP";
-	}
+	Path memStickDirectory = Path("/storage/roms/psp/");
+ 	Path pspDirectory = Path("/storage/.config/ppsspp/PSP/");
 
 	switch (directoryType) {
 	case DIRECTORY_PSP:
@@ -676,9 +670,9 @@ Path GetSysDirectory(PSPDirectories dire
 	case DIRECTORY_GAME:
 		return pspDirectory / "GAME";
 	case DIRECTORY_SAVEDATA:
-		return pspDirectory / "SAVEDATA";
+               return Path("/storage/roms/psp/");
 	case DIRECTORY_SCREENSHOT:
-		return pspDirectory / "SCREENSHOT";
+		return Path("/storage/roms/screenshots/");
 	case DIRECTORY_SYSTEM:
 		return pspDirectory / "SYSTEM";
 	case DIRECTORY_PAUTH:
@@ -688,7 +682,7 @@ Path GetSysDirectory(PSPDirectories dire
 	case DIRECTORY_DUMP:
 		return pspDirectory / "SYSTEM/DUMP";
 	case DIRECTORY_SAVESTATE:
-		return pspDirectory / "PPSSPP_STATE";
+		return Path("/storage/roms/savestates/psp/ppsspp-sa");
 	case DIRECTORY_CACHE:
 		return pspDirectory / "SYSTEM/CACHE";
 	case DIRECTORY_TEXTURES:
@@ -710,11 +704,11 @@ Path GetSysDirectory(PSPDirectories dire
 		return pspDirectory / "themes";
 
 	case DIRECTORY_MEMSTICK_ROOT:
-		return g_Config.memStickDirectory;
+		return memStickDirectory;
 	// Just return the memory stick root if we run into some sort of problem.
 	default:
 		ERROR_LOG(FILESYS, "Unknown directory type.");
-		return g_Config.memStickDirectory;
+		return pspDirectory;
 	}
 }
 
diff -rupN ppsspp.orig/SDL/SDLJoystick.cpp ppsspp/SDL/SDLJoystick.cpp
--- ppsspp.orig/SDL/SDLJoystick.cpp	2024-04-24 20:38:11.650646325 +0000
+++ ppsspp/SDL/SDLJoystick.cpp	2024-04-24 20:53:07.224922822 +0000
@@ -25,7 +25,7 @@ SDLJoystick::SDLJoystick(bool init_SDL )
 		SDL_Init(SDL_INIT_JOYSTICK | SDL_INIT_VIDEO | SDL_INIT_GAMECONTROLLER);
 	}
 
-	const char *dbPath = "gamecontrollerdb.txt";
+	const char *dbPath = "/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt";
 	cout << "loading control pad mappings from " << dbPath << ": ";
 
 	size_t size;
@@ -34,7 +34,7 @@ SDLJoystick::SDLJoystick(bool init_SDL )
 		SDL_RWops *rw = SDL_RWFromConstMem(mappingData, size);
 		// 1 to free the rw after use
 		if (SDL_GameControllerAddMappingsFromRW(rw, 1) == -1) {
-			cout << "Failed to read mapping data - corrupt?" << endl;
+			cout << "/storage/.config/SDL-GameControllerDB/gamecontrollerdb.txt missing" << endl;
 		}
 		delete[] mappingData;
 	} else {
diff -rupN ppsspp.orig/UI/NativeApp.cpp ppsspp/UI/NativeApp.cpp
--- ppsspp.orig/UI/NativeApp.cpp	2024-04-24 20:38:11.658646498 +0000
+++ ppsspp/UI/NativeApp.cpp	2024-04-24 20:53:07.224922822 +0000
@@ -390,7 +390,7 @@ void NativeInit(int argc, const char *ar
 	g_VFS.Register("", new DirectoryReader(File::GetExeDirectory()));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/local/share/ppsspp/assets")));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/local/share/games/ppsspp/assets")));
-	g_VFS.Register("", new DirectoryReader(Path("/usr/share/ppsspp/assets")));
+	g_VFS.Register("", new DirectoryReader(Path("/storage/.config/ppsspp/assets")));
 	g_VFS.Register("", new DirectoryReader(Path("/usr/share/games/ppsspp/assets")));
 #endif
 
@@ -495,7 +495,7 @@ void NativeInit(int argc, const char *ar
 	else // Just in case
 		config = "./config";
 
-	g_Config.memStickDirectory = Path(config) / "ppsspp";
+	g_Config.memStickDirectory = Path("/storage/roms/psp/");
 	g_Config.flash0Directory = File::GetExeDirectory() / "assets/flash0";
 	if (getenv("HOME") != nullptr) {
 		g_Config.defaultCurrentDirectory = Path(getenv("HOME"));
